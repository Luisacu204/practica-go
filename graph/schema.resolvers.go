package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"

	"fmt"
	"log"

	"proyecto/x"

	
)

// Write is the resolver for the write field.
func (r *mutationResolver) Write(ctx context.Context, B string) ([]string, error) {
	
	
	if err := x.Write(B); err != nil {
		fmt.Println("Error writing data:", err)
	 
	}
	

	
	Content, err := x.ReadSQl()
	if err != nil {
		log.Fatal(err)
	}

	return Content,err

}

// DeleteValue is the resolver for the deleteValue field.
func (r *mutationResolver) DeleteValue(ctx context.Context) (string, error) {
	text := x.DeleteAll()

		
	
	return text,nil
}

// DeleteSingle is the resolver for the deleteSingle field.
func (r *mutationResolver) DeleteSingle(ctx context.Context, B int) ([]string, error) {
	err := x.DeleteSingle(B)
	if err != nil {
		fmt.Println(err)
	}

	Content, err := x.ReadSQl()
	if err != nil {
		log.Fatal(err)
	}

	return Content, nil
}

// UpdateSingle is the resolver for the updateSingle field.
func (r *mutationResolver) UpdateSingle(ctx context.Context, B int, newText string) ([]string, error) {
	content, err := x.UpdateSingle(B, newText)
	if err != nil {
		fmt.Println(err)
	}
	return content, err
}

// TextFileContent is the resolver for the textFileContent field.
func (r *queryResolver) TextFileContent(ctx context.Context) ([]string, error) {
	
	text, err := x.ReadSQl()
	if err != nil {
		return nil, err
	}
	
	return text, nil
}

// Mutation returns MutationResolver implementation.




func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

